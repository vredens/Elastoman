#!/usr/bin/env perl

use warnings;
use strict;

use lib './lib/';

use JSON;
use Data::Dumper;
use Term::ANSIColor;
use CLI::Display qw/print_ok print_hl print_error print_die/;
use File::Basename;

my $CONFIG_FILE = dirname($0) . '/indexes.json';

sub run_elastic_request {
	my $cmd = shift;
	my $r = `$cmd`;

	if ($r !~ /^{/ or $r =~ /^{"error/) {
		print_error("\t", 'ElasticSearch error response: ', $r, "\n");
		return 0;
	}
	return 1;
}

sub continue_or_abort {
	print_hl ('Continue? [y|n] ');
	while(<STDIN>) {
		s/\n|\r//g;
		if ($_ eq 'y') {
			return 1;
		} elsif ($_ eq 'n') {
			exit 1;
		} else {
			print_error("use either 'y', 'n' or abort the script. Continue [y|n]");
		}
	}
}

=head2 fetch_alias_indexes (host, port, alias_name)

fetch all indexeses of a given alias

=cut
sub fetch_alias_indexes($$$) {
	my $uri = 'http://' . (shift) . ':' . (shift);
	my $alias = shift;

	my $r = `curl -s -XGET $uri/_aliases`;
	my $indexes = decode_json($r);

	my @r;
	foreach my $i (keys %{$indexes}) {
		foreach my $a (keys %{$indexes->{$i}->{aliases}}) {
			if ($a eq $alias) {
				push @r, $i;
			}
		}
	}

	return @r;
}

sub find_index_version {
	my $uri = shift;
	my $tpl = shift;

	my $r = `curl -s -XGET $uri`;
	my $indexes = decode_json($r);

	foreach (keys %{$indexes}) {
		if (/$tpl/) {
			return $1;
		}
	}

	return undef;
}

sub get_index_name_and_template($$) {
	my $_cfg = shift;
	my $_env = shift;

	my $in = $_cfg->{'base-name'};
	my $idx_template;

	if ($_cfg->{'use_env'}) {
		if (defined $_cfg->{'version'}) {
			$idx_template = qr/^${in}_v(\d+)_(\w+)$/;
			$in .= '_v' . $_cfg->{'version'} . '_' . $_env;
		} else {
			$idx_template = qr/^${in}_(\w+)$/;
			$in .= '_' . $_env;
		}
	} else {
		if (defined $_cfg->{'version'}) {
			$idx_template = qr/^${in}_v(\d+)$/;
			$in .= '_v' . $_cfg->{'version'};
		} else {
			$idx_template = qr/^${in}$/;
		}
	}

	return ($in, $idx_template);
}

sub check_index_exists {
	my $_cfg = shift;
	my $_in = shift;

	my $uri = get_es_uri($_cfg, $_in, '_aliases');

	my $r = `curl -s -XGET $uri`;

	return $r ne '{}';
}

sub get_es_uri {
	my $cfg = shift;

	my $uri = 'http://' . $cfg->{'host'} . ':' . $cfg->{'port'} . '/';
	$uri .= join '/', @_ if (@_);

	return $uri;
}

my $dbg_mode = 0;

open(my $fh, '<', $CONFIG_FILE) or print_die ('could not open config file: ', $CONFIG_FILE, "\n");
my @l = <$fh>;
close ($fh);
my $json = join '', @l;
my $cfg = decode_json($json);

my $module = shift;

if (! defined $module or !@ARGV) {
	print_error('Correct sintax: ', $0, ' <index> [<task> ...]', "\n");

	print_hl('Indexes', "\n");
	my @modules;
	foreach my $m (keys %{$cfg}) {
		unless (grep /^$m$/, qw/debug host port env mappings-folder/) {
			print_ok("\t", $m, "\n");
			push @modules, $m;
		}
	}

	print_hl('Global Tasks: ', "\n");
	print_ok("\t", 'update: '); print 'checks the current installed version, increments it and creates the index with the new version. use task [install] for indexes without versioning', "\n";
	print_ok("\t", 'install: '); print 'creates the index with the version specified in the configuration. if an index with that version already exists it is removed first.', "\n";
	print_ok("\t", 'alias: '); print 'fixes all aliases (removes and adds).', "\n";
	print_ok("\t", 'replicas: '); print 'sets the number of replicas as per what is configured (this ignores/overrides what is defined in the mappings file).', "\n";

	foreach my $m (@modules) {
		if (defined $cfg->{$m}->{'commands'}) {
			print_hl ("Index [", $m, "] tasks:\n");
			foreach (keys %{$cfg->{$m}->{'commands'}}) {
				print_ok("\t", $_, "\n");
			}
		}
	}
	exit 1;
}

while (@ARGV) {
	my $op = shift;

	if ($op eq 'replicas') {
		unless (defined $cfg->{$module}->{'replicas'}) {
			print_die('No field "replicas" found in the configuration of the index.', "\n");
			next;
		}

		unless ($cfg->{$module}->{'replicas'} =~ /^\d+$/ and $cfg->{$module}->{'replicas'} > 0) {
			print_die('Replicas must be an integer higher than zero.', "\n");
			next;
		}

		my ($in, undef) = get_index_name_and_template($cfg->{$module}, $cfg->{'env'});
		my $cmd = 'curl -s -XPOST ' . get_es_uri($cfg, $in, '_settings') . ' -d \'' . encode_json({ 'index' => { 'number_of_replicas' => $cfg->{$module}->{'replicas'} } }) . '\'';
		print_ok('Running: ', $cmd, "\n");
		continue_or_abort();
		run_elastic_request($cmd) unless $cfg->{debug};

	} elsif ($op eq 'alias') {
		unless (defined $cfg->{$module}->{'aliases'}) {
			print_error('you cannot create aliases for indexes which don\'t have any.', "\n");
			next;
		}

		my ($in, $idx_template) = get_index_name_and_template($cfg->{$module}, $cfg->{'env'});

		print_ok ('fixing aliases for index: [', $in, "]\n");

		my @actions;

		foreach (@{$cfg->{$module}->{'aliases'}}) {
			my $an = $_->{name};
			$an .= '_' . $cfg->{'env'} if ($_->{use_env});

			my @a = fetch_alias_indexes($cfg->{'host'}, $cfg->{'port'}, $an);

			my $skip_add = 0;
			foreach (@a) {
				if (/$idx_template/) {
					if ($_ ne $in) {
						push @actions, { 'remove' => {'index' => $_, 'alias' => $an}};
						print_ok ("\t", 'removing index [', $_, '] from alias [', $an, "]\n");
					} else {
						$skip_add = 1;
					}
				}
			}

			unless ($skip_add) {
				if (defined $_->{'filter'}) {
					push @actions, { 'add' => {'index' => $in, 'alias' => $an, 'filter' => $_->{'filter'}}};
					print_ok ("\t", 'adding index [', $in, '] to alias [', $an, '] with filters', "\n");
				} else {
					push @actions, { 'add' => {'index' => $in, 'alias' => $an}};
					print_ok ("\t", 'adding index [', $in, '] to alias [', $an, "]\n");
				}
			}
		}
		my $cmd = 'curl -s -XPOST ' . get_es_uri($cfg, '_aliases') . ' -d \'' . encode_json({ 'actions' => \@actions}) . '\'';
		print_ok('Running: ', $cmd, "\n");
		continue_or_abort();
		run_elastic_request($cmd) unless $cfg->{debug};

	} elsif ($op eq 'fetch') {

		my ($in, undef) = get_index_name_and_template($cfg->{$module}, $cfg->{'env'});
		if (defined $cfg->{$module}->{'fetch'}) {
			my $cmd = $cfg->{$module}->{'fetch'};
			$cmd =~ s/\$index\$/$in/;
			$cmd =~ s/\$host\$/$cfg->{'host'}/;
			$cmd =~ s/\$port\$/$cfg->{'port'}/;
			print_ok ("running ", $cmd, "\n");
			continue_or_abort();
			`$cmd` unless $cfg->{debug};
		} elsif (defined $cfg->{$module}->{'fetch-message'}) {
			print_hl ("\t", $cfg->{$module}->{'fetch-message'}, "\n");
		}

	} elsif ($op eq 'index') {

		my ($in, undef) = get_index_name_and_template($cfg->{$module}, $cfg->{'env'});
		if (defined $cfg->{$module}->{'index'}) {
			my $cmd = $cfg->{$module}->{'index'};
			$cmd =~ s/\$index\$/$in/;
			$cmd =~ s/\$version\$/$cfg->{$module}->{'version'}/;
			$cmd =~ s/\$host\$/$cfg->{'host'}/;
			$cmd =~ s/\$port\$/$cfg->{'port'}/;
			print_ok ("running ", $cmd, "\n");
			continue_or_abort();
			`$cmd` unless $cfg->{debug};
		} elsif (defined $cfg->{$module}->{'index-message'}) {
			print_hl ("\t", $cfg->{$module}->{'index-message'}, "\n");
		}

	} elsif ($op eq 'install') {

		my ($in, undef) = get_index_name_and_template($cfg->{$module}, $cfg->{'env'});
		my $cmd;
		if (check_index_exists($cfg, $in)) {
			$cmd = 'curl -s -XDELETE ' . get_es_uri($cfg, $in);
			print_ok ("running: ", $cmd, "\n");
			continue_or_abort();
			run_elastic_request($cmd) unless $cfg->{debug};
		}
		$cmd = 'curl -s -XPOST ' . get_es_uri($cfg, $in) . ' --data-binary @' . $cfg->{'mappings-folder'} . $cfg->{$module}->{'mapping'};
		print_ok ("running: ", $cmd, "\n");
		continue_or_abort();
		run_elastic_request($cmd) unless $cfg->{debug};

	} elsif ($op eq 'update') {
		unless (defined $cfg->{$module}->{'version'}) {
			print_error('you cannot update indexes which don\'t support versioning. please just use install', "\n");
			next;
		}

		my ($in, $tpl) = get_index_name_and_template($cfg->{$module}, $cfg->{'env'});

		my $iv;
		foreach (@{$cfg->{$module}->{'aliases'}}) {
			if ($_->{'name'} eq $cfg->{$module}->{'version-check-alias'}) {
				my $an = $_->{name};
				$an .= '_' . $cfg->{'env'} if ($_->{use_env});
				$iv = find_index_version(get_es_uri($cfg, $an, '_aliases'), $tpl);
				last;
			}
		}

		unless (defined $iv) {
			print 'error: could not find a proper version for index ', $in, ' using alias ', $cfg->{$module}->{'version-check-alias'}, "\n";
			exit 1;
		}

		$cfg->{$module}->{'version'} = $iv + 1;
		($in, undef) = get_index_name_and_template($cfg->{$module}, $cfg->{'env'});

		my $cmd;
		if (check_index_exists($cfg, $in)) {
			$cmd = 'curl -s -XDELETE ' . get_es_uri($cfg, $in);
			print_ok ("running: ", $cmd, "\n");
			continue_or_abort();
			run_elastic_request($cmd) unless $cfg->{debug};
		}
		$cmd = 'curl -s -XPOST ' . get_es_uri($cfg, $in) . ' --data-binary @' . $cfg->{'mappings-folder'} . $cfg->{$module}->{'mapping'};
		print_ok ("running: ", $cmd, "\n");
		continue_or_abort();
		run_elastic_request($cmd) unless $cfg->{debug};

		print_ok ("saving the new configuration\n");
		continue_or_abort();
		my $json_text = JSON->new->utf8(1)->pretty(1)->encode($cfg);
		open (my $ofh, '>', $CONFIG_FILE);
		printf $ofh $json_text;
		close ($ofh);
	}
}
