#!/usr/bin/env perl

use strict;
use warnings;

use lib './lib/';

use CLI::Display     qw/print_ok print_hl print_error print_die/;

use Data::Dumper;
use Cwd              qw/abs_path getcwd/;
use File::Path       qw/mkpath/;
use File::Basename;
use File::Copy       qw/cp/;
use Archive::Tar;

use YAML::Tiny;
use LWP::Simple;

# TODO: check max open files limit

sub print_usage {
	print_error('Invalid syntax.', "\n\n");
	print_hl ("Here's how to run Elastoman\n");
	print_hl ("\t$0 deploy <instance>  "); print_ok ("deploy an elasticsearch instance\n");
	print_hl ("\t$0 list               "); print_ok ("List available instances and their status\n");
	print_hl ("\t$0 start <instance>   "); print_ok ("Start an elasticsearch instance\n");
	print_hl ("\t$0 stop <instance>    "); print_ok ("Stop an elasticsearch instance\n");
	exit 1;
}

my $CONFIG_FILE = dirname($0) . '/instances.yml';

die "No configuration file" unless -f $CONFIG_FILE;
my $cfg = YAML::Tiny->read($CONFIG_FILE);

my $op = shift;

print_usage() unless defined $op;

if ($op eq 'deploy') {
	prepare_elasticsearch();
	my $instance = shift;
	print_die ('You need to provide an instance name') unless defined $instance;
	print_die ('No instance found for that name ['.$instance.']') unless defined $cfg->[0]->{'instances'}->{$instance};
	$instance = $cfg->[0]->{'instances'}->{$instance};
	prepare_instance($instance);
} elsif ($op eq 'start') {
	my $instance = shift;
	print_die ('You need to provide an instance name') unless defined $instance;
	print_die ('No instance found for that name ['.$instance.']') unless defined $cfg->[0]->{'instances'}->{$instance};
	$instance = $cfg->[0]->{'instances'}->{$instance};
	start($instance);
	$cfg->write($CONFIG_FILE);
} elsif ($op eq 'stop') {
	my $instance = shift;
	print_die ('You need to provide an instance name') unless defined $instance;
	print_die ('No instance found for that name ['.$instance.']') unless defined $cfg->[0]->{'instances'}->{$instance};
	$instance = $cfg->[0]->{'instances'}->{$instance};
	stop($instance);
} elsif ($op eq 'list') {
	print_hl ("list of configured elasticsearch server instances and their status\n");

	foreach (keys %{$cfg->[0]->{instances}}) {
		my $status = 'down';
		if (defined $cfg->[0]->{'instances'}->{$_}->{'pid-file'}) {
			my $pid = get_pid_from_file($cfg->[0]->{'instances'}->{$_}->{'pid-file'});
			$status = 'up' if ($pid and kill 0, $pid);
		}
		print_ok (sprintf('%15s', $_), '  '); print ($status, "\n");
	}

} elsif ($op eq 'new') {

}

sub get_pid_from_file {
	my $f = shift;

	return 0 unless -r $f;

	open (my $pidfh, '<', $f);
	my $pid = <$pidfh>;
	close ($pidfh);

	return $pid;
}

sub check_elasticsearch {
	1;
}

sub start {
	my $instance = shift;

	my $ld = abs_path($instance->{'location'});

	if (defined $instance->{'pid-file'}) {
		my $pid = get_pid_from_file($instance->{'pid-file'});
		if ($pid) {
			print_die ("Instance is already running with PID $pid\n") if (kill 0, $pid);
		}
	} else {
		$instance->{'pid-file'} = "$ld/pidfile";
	}

	my $prefix = '';
	if (defined $instance->{'memory'}) {
		$prefix = "ES_HEAP_SIZE=$instance->{'memory'}";
	}

	my $sl = $cfg->[0]->{'server'}->{'location'};
	my $cwd = getcwd;
	chdir $sl . '/elasticsearch';
	print_ok ('Running: ', "$prefix ./bin/elasticsearch -p $instance->{'pid-file'} -Des.path.conf=$ld/config", "\n");
	`$prefix ./bin/elasticsearch -p $instance->{'pid-file'} -Des.path.conf=$ld/config`;
	chdir $cwd;
}

sub stop {
	my $instance = shift;

	my $ld = abs_path($instance->{'location'});
	my $pid_file = $ld . '/pidfile';
	die "Could not find the PID file. You probably need to kill this instance manually." unless -f $pid_file;

	my $pid = get_pid_from_file($pid_file);

	kill 'TERM', $pid;
	my $i = 0;
	do {
		sleep 1;
		$i++;
	} while (kill 0, $pid and $i < 30);

	die "Could not terminated the process with PID $pid" if (kill 0, $pid);
}

sub prepare_instance {
	my $instance = shift;

	print_ok ('making dir ', $instance->{'location'}, "\n");
	mkpath ($instance->{'location'}) or die 'could not make path' unless -d $instance->{'location'};

	my $lf = abs_path($instance->{'location'});

	# create the config folder
	my %folders;

	foreach (qw/config data logs/) {
		$folders{$_} = $lf . '/' . $_;
		print_ok ('making dir ', $folders{$_}, "\n");
		mkdir $folders{$_} or die 'cant make dir' unless defined -d $folders{$_};
	}

	$instance->{'config-params'}->{'path.conf'} = $folders{config}; # always replace the config folder, ignore any settings in config-params
	$instance->{'config-params'}->{'path.data'} = $folders{data} unless defined $instance->{'config-params'}->{'path.data'};
	$instance->{'config-params'}->{'path.logs'} = $folders{logs} unless defined $instance->{'config-params'}->{'path.logs'};

	# copy and update the config
	open (my $ofh, '>', $folders{config} . '/elasticsearch.yml') or die 'could not open destination config file';
	foreach (keys %{$instance->{'config-params'}}) {
		print $ofh $_, ': ', $instance->{'config-params'}->{$_}, "\n";
	}
	close ($ofh);
	cp("$cfg->[0]->{'server'}->{'location'}/elasticsearch/config/logging.yml", "$folders{config}/logging.yml")
}

sub prepare_elasticsearch {
	my $sl = $cfg->[0]->{'server'}->{'location'};
	my $es_file = 'elasticsearch-' . $cfg->[0]->{'elasticsearch'}->{'version'} . '.tar.gz';
	my $es_folder = 'elasticsearch-' . $cfg->[0]->{'elasticsearch'}->{'version'};
	my $es_dluri = $cfg->[0]->{'elasticsearch'}->{'base-uri'} . $es_file;

	my $bwd = getcwd;

	mkdir $sl unless -d $sl;
	chdir $sl;

	print_ok ('changed dir to ', $sl, "\n");

	unless (-f $es_file or -d $es_folder) {
		print_ok ('downloading elasticsearch', "\n");
		getstore($es_dluri, $es_file);
		die "Error fetching $es_file from $es_dluri" unless -f $es_file;
	}
	
	unless (-d $es_folder) {
		print_ok ('extracting elasticsearch', "\n");
		my $tar = Archive::Tar->new;
		$tar->read($es_file);
		$tar->extract();
		die "Could not extract $es_file" unless -d $es_folder;
	}

	unless (-d 'elasticsearch') {
		symlink $es_folder, 'elasticsearch';
		die "Could not create symlink to $es_folder" unless -d 'elasticsearch';
	}
	
	if (defined $cfg->[0]->{'elasticsearch'}->{'plugins'}) {
		my $plugins = $cfg->[0]->{'elasticsearch'}->{'plugins'};
		chdir $es_folder;
		foreach (keys %{$plugins}) {
			print_ok ('plugin already installed: ', $_, "\n") and next if -d "plugins/$_";
			print_ok ('installing plugin: ', $_, "\n");
			`./bin/plugin -install $plugins->{$_}`;
		}
	}

	chdir $bwd;
}

__END__

